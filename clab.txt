1
a)writes a program in C to Display the n terms of even natural numbers and their sum

#include <stdio.h>

int main() {
    int n, sum = 0;
    
    printf("Enter the value of n: ");
    scanf("%d", &n);
    
    printf("The first %d even natural numbers are: ", n);
    for (int i = 1; i <= n; i++) {
        int even_num = 2 * i;
        printf("%d ", even_num);
        sum += even_num;
    }
    
    printf("\nSum of the first %d even natural numbers is: %d\n", n, sum);
    
    return 0;
}

b)writes a C Program to calculate the factorial of a given number.

#include <stdio.h>

// Function to calculate factorial
int factorial(int n) {
    if (n == 0 || n == 1) // Base case: factorial of 0 and 1 is 1
        return 1;
    else
        return n * factorial(n - 1); // Recursive call to calculate factorial
}

int main() {
    int num;
    
    // Input
    printf("Enter a positive integer: ");
    scanf("%d", &num);
    
    // Checking if the number is non-negative
    if (num < 0) {
        printf("Factorial is not defined for negative numbers.\n");
    } else {
        // Calling the factorial function and displaying the result
        printf("Factorial of %d is: %d\n", num, factorial(num));
    }
    
    return 0;
}

2)write a program in C to find transpose of the matrix

#include <stdio.h>

#define ROWS 3
#define COLS 3

// Function to find the transpose of a matrix
void transposeMatrix(int matrix[ROWS][COLS]) {
    int transposeMatrix[COLS][ROWS];
    // Computing transpose
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            transposeMatrix[j][i] = matrix[i][j];
        }
    }
    // Displaying the transpose
    printf("Transpose of the matrix:\n");
    for (int i = 0; i < COLS; i++) {
        for (int j = 0; j < ROWS; j++) {
            printf("%d\t", transposeMatrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int matrix[ROWS][COLS] = {{1, 2, 3},
                              {4, 5, 6},
                              {7, 8, 9}};
    printf("Original matrix:\n");
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
    transposeMatrix(matrix); // Function call to find the transpose
    return 0;
}

3.
a)writes a program in C to check whether a number is a prime number or not using the function.

#include <stdio.h>

// Function to check if a number is prime
int isPrime(int n) {
    if (n <= 1) // 0 and 1 are not prime numbers
        return 0;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0)
            return 0; // If n is divisible by any number other than 1 and itself, it's not prime
    }
    return 1; // If no divisor found, the number is prime
}

int main() {
    int num;

    // Input
    printf("Enter a positive integer: ");
    scanf("%d", &num);

    // Checking if the number is prime using the isPrime function
    if (isPrime(num))
        printf("%d is a prime number.\n", num);
    else
        printf("%d is not a prime number.\n", num);

    return 0;
}

b)writes recursive program which computes the nth Fibonacci number, for appropriate value of n.

#include <stdio.h>

// Function to compute the nth Fibonacci number recursively
int fibonacci(int n) {
    if (n <= 1)
        return n; // Base case: Fibonacci of 0 is 0 and Fibonacci of 1 is 1
    else
        return fibonacci(n - 1) + fibonacci(n - 2); // Recursive call to compute Fibonacci
}

int main() {
    int n;

    // Input
    printf("Enter the value of n: ");
    scanf("%d", &n);

    // Checking if n is non-negative
    if (n < 0) {
        printf("Invalid input. n should be a non-negative integer.\n");
    } else {
        // Calling the Fibonacci function and displaying the result
        printf("The %dth Fibonacci number is: %d\n", n, fibonacci(n));
    }

    return 0;
}

4.
a)Write recursive and non-recursive C program for calculation of Factorial of an integer.

#include <stdio.h>

// Function to calculate factorial non-recursively
int factorial_non_recursive(int n) {
    int result = 1;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

int main() {
    int num;

    // Input
    printf("Enter a non-negative integer: ");
    scanf("%d", &num);

    // Checking if the number is non-negative
    if (num < 0) {
        printf("Factorial is not defined for negative numbers.\n");
    } else {
        // Calling the factorial_non_recursive function and displaying the result
        printf("Factorial of %d (without recursion) is: %d\n", num, factorial_non_recursive(num));
    }

    return 0;
}
b)Write recursive and non-recursive C program for calculation of GCD (n, m).

#include<stdio.h>
#include<math.h>

int main() {
    int n1, n2;
    scanf("%d%d", &n1, &n2);
    int gcd = 1;
    for(int i = 2; i < n1; i++) {
        if(n1 % i == 0 && n2 % i == 0)
            gcd = i;
    }
    printf("GCD is: %d", gcd);
}

5)Write C program that use both recursive and non-recursive functions to perform Binary search for a key value in a given list.

#include <stdio.h>

// Non-recursive binary search function
int binarySearch(int arr[], int low, int high, int key) {
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        // Check if the key is present at mid
        if (arr[mid] == key)
            return mid;
        
        // If key is greater, ignore left half
        if (arr[mid] < key)
            low = mid + 1;
        
        // If key is smaller, ignore right half
        else
            high = mid - 1;
    }
    
    // If the key is not present in the array
    return -1;
}

// Recursive binary search function
int binarySearchRecursive(int arr[], int low, int high, int key) {
    if (low <= high) {
        int mid = low + (high - low) / 2;
        
        // If the key is present at mid
        if (arr[mid] == key)
            return mid;
        
        // If key is greater, search in the right half
        if (arr[mid] < key)
            return binarySearchRecursive(arr, mid + 1, high, key);
        
        // If key is smaller, search in the left half
        else
            return binarySearchRecursive(arr, low, mid - 1, key);
    }
    
    // If the key is not present in the array
    return -1;
}

int main() {
    int arr[] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};
    int n = sizeof(arr) / sizeof(arr[0]);
    int key = 14;

    // Non-recursive binary search
    int nonRecursiveResult = binarySearch(arr, 0, n - 1, key);
    if (nonRecursiveResult != -1)
        printf("Element %d found at index %d using non-recursive binary search.\n", key, nonRecursiveResult);
    else
        printf("Element %d not found using non-recursive binary search.\n", key);

    // Recursive binary search
    int recursiveResult = binarySearchRecursive(arr, 0, n - 1, key);
    if (recursiveResult != -1)
        printf("Element %d found at index %d using recursive binary search.\n", key, recursiveResult);
    else
        printf("Element %d not found using recursive binary search.\n", key);

    return 0;
}

6.Write C program that implement stack (its operations) using arrays.

//implement a stack using array
#include <stdio.h>
#include <stdlib.h>
#define MAX 10
int stack[MAX];
int top = -1;
void push(int);
int pop();
void display();

int main()
{
    int ch, val;
    printf("1. Push in stack");
    printf("\n2. Pop from stack");
    printf("\n3. Display stack");
    printf("\n4. Exit");
    do
    {
        printf("\nEnter choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("\nEnter value to be pushed:");
            scanf("%d", &val);
            push(val);
            break;
        case 2:
            val = pop();
            if (val != -1)
                printf("\nThe number deleted is : %d", val);
            break;
        case 3:
            display();
            break;
        case 4:
            printf("\nExit");
            break;
        default:
            printf("\nInvalid Choice");
        }
    } while (ch != 4);
    return 0;
}
void push(int val)
{
    if (top == MAX - 1)
        printf("\nStack is full");
    else
    {
        top++;
        stack[top] = val;
    }
}
int pop()
{
    int val;
    if (top == -1)
    {
        printf("\nStack is empty");
        return -1;
    }
    else
    {
        val = stack[top];
        top--;
        return val;
    }
}
void display()
{
    int i;
    if (top == -1)
        printf("\nStack is empty");
    else
    {
        printf("\nStack is...\n");
        for (i = top; i >= 0; i--)
            printf("%d\n", stack[i]);
    }
}

7)Write C program that implement Queue (its operations) using linked lists.

#include <stdio.h>
# define SIZE 100
void enqueue();
void dequeue();
void show();
int inp_arr[SIZE];
int Rear = - 1;
int Front = - 1;
main()
{
    int ch;
    while (1)
    {
        printf("1.Enqueue Operation\n");
        printf("2.Dequeue Operation\n");
        printf("3.Display the Queue\n");
        printf("4.Exit\n");
        printf("Enter your choice of operations : ");
        scanf("%d", &ch);
        switch (ch)
        {
            case 1:
            enqueue();
            break;
            case 2:
            dequeue();
            break;
            case 3:
            show();
            break;
            case 4:
            exit(0);
            default:
            printf("Incorrect choice \n");
        } 
    } 
} 
 
void enqueue()
{
    int insert_item;
    if (Rear == SIZE - 1)
       printf("Overflow \n");
    else
    {
        if (Front == - 1)
      
        Front = 0;
        printf("Element to be inserted in the Queue\n : ");
        scanf("%d", &insert_item);
        Rear = Rear + 1;
        inp_arr[Rear] = insert_item;
    }
} 
 
void dequeue()
{
    if (Front == - 1 || Front > Rear)
    {
        printf("Underflow \n");
        return ;
    }
    else
    {
        printf("Element deleted from the Queue: %d\n", inp_arr[Front]);
        Front = Front + 1;
    }
} 
 
void show()
{
    
    if (Front == - 1)
        printf("Empty Queue \n");
    else
    {
        printf("Queue: \n");
        for (int i = Front; i <= Rear; i++)
            printf("%d ", inp_arr[i]);
        printf("\n");
    }
} 


8) Write a C program that uses functions to create a singly linked list and perform various operations on it

//Singly Linked list
#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node *next;
};

struct Node *head = NULL; //starting node
struct Node *tail = NULL; //ending node

struct Node *CreateANode(int val) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = val;
    newNode->next = NULL;
    return newNode;
}

void InsertintoLinkedList(int val) {
    struct Node *newNode = CreateANode(val);
    if(head == NULL) {
        head = newNode;
        tail = newNode;
    } else {

        tail->next = newNode;
        tail = newNode;
     
    }
}

void DisplayLinkedList(){
    struct Node *temp = head;
    while(temp!=NULL){
        printf("%d ",temp->data);
        temp = temp->next;
    }
}

void InsertAtFirst(int val) {
    struct Node *newNode = CreateANode(val);

    if(head == NULL) {
        head = newNode;
        tail = newNode;
    } 
    else {
        newNode->next = head;
        head = newNode;
    }
}

void InsertAtLast(int val) {
    struct Node *newNode = CreateANode(val);
    if(head == NULL) {
        head = newNode;
        tail = newNode;
    } else {
        tail->next = newNode;
        tail = newNode;
    }
}

void InsertAtPos(int val, int position) {
    struct Node *newNode = CreateANode(val);
    struct Node *temp = head;
    int count = 0;
    while(count < position - 1) {
        count++;
        temp = temp->next;
    }
    struct Node *temp1 = temp->next;
    temp->next = newNode;
    newNode->next = temp1;
    
}

int main() {
    int n;
    scanf("%d", &n);
    for(int i = 0; i < n; i++) {
        int val;
        scanf("%d", &val);
        InsertintoLinkedList(val);
    }
    
    InsertAtFirst(5);
    InsertAtLast(60);
    InsertAtPos(500,3);
    DisplayLinkedList();
}

9) Write a recursive C program for traversing a binary tree in preorder, in order and post order

#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the binary tree
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function for inorder traversal of the binary tree
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Function for preorder traversal of the binary tree
void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

// Function for postorder traversal of the binary tree
void postorder(struct Node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    // Constructing a binary tree
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    printf("Inorder traversal: ");
    inorder(root);
    printf("\n");

    printf("Preorder traversal: ");
    preorder(root);
    printf("\n");

    printf("Postorder traversal: ");
    postorder(root);
    printf("\n");

    return 0;
}


10) Implementation of Binary Search trees- Insertion and deletion.

#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the binary search tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform insertion in the binary search tree
struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        // If the tree is empty, create a new node and return it
        return createNode(data);
    } else {
        // Recursive insertion
        if (data <= root->data)
            root->left = insert(root->left, data);
        else
            root->right = insert(root->right, data);
        return root;
    }
}

// Function to find the minimum value node in a tree
struct Node* minValueNode(struct Node* node) {
    struct Node* current = node;
    // Loop down to find the leftmost leaf
    while (current && current->left != NULL)
        current = current->left;
    return current;
}

// Function to perform deletion in the binary search tree
struct Node* deleteNode(struct Node* root, int data) {
    if (root == NULL) return root; // If the tree is empty, return

    // Recursive deletion
    if (data < root->data)
        root->left = deleteNode(root->left, data);
    else if (data > root->data)
        root->right = deleteNode(root->right, data);
    else {
        // Node with only one child or no child
        if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        struct Node* temp = minValueNode(root->right);

        // Copy the inorder successor's content to this node
        root->data = temp->data;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// Function to perform inorder traversal of the binary search tree
void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

int main() {
    struct Node* root = NULL;

    // Inserting elements into the binary search tree
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);

    printf("Inorder traversal of the BST: ");
    inorderTraversal(root);
    printf("\n");

    // Deleting elements from the binary search tree
    root = deleteNode(root, 20);
    printf("Inorder traversal after deleting 20: ");
    inorderTraversal(root);
    printf("\n");

    root = deleteNode(root, 30);
    printf("Inorder traversal after deleting 30: ");
    inorderTraversal(root);
    printf("\n");

    root = deleteNode(root, 50);
    printf("Inorder traversal after deleting 50: ");
    inorderTraversal(root);
    printf("\n");

    return 0;
}

11) Write C program that implement Bubble sort, to sort a given list of integers in ascending order

#include <stdio.h>

// Function to perform Bubble Sort
void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        // Last i elements are already in place
        for (j = 0; j < n - i - 1; j++) {
            // Swap if the element found is greater than the next element
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    printf("Original array: \n");
    printArray(arr, n);
    
    bubbleSort(arr, n);
    
    printf("Sorted array in ascending order: \n");
    printArray(arr, n);
    
    return 0;
}


12) Write C program that implement merge sort, to sort a given list of integers in ascending order. 

void Merge(int A[], int l , int m, int r){
    int i, j, k;
    i = l;
    j = m + 1;
    k = 0;
    int B[r+1];
    while(i <= m && j <= r){
        if(A[i] < A[j]){
            B[k++] = A[i++];
        }
        else{
            B[k++] = A[j++];
        }
    }
    while(i <= m){
        B[k++] = A[i++];
    }
    while(j <= r){
        B[k++] = A[j++];
    }
    for(int i = l, k = 0 ; i <= r ; i++, k++){
        A[i] = B[k];
    }

}
void MergeSort(int A[], int l, int r){
    if(l < r){
        int m = (l + r) / 2;
        //divide the array into two parts
        MergeSort(A, l , m);
        MergeSort(A, m + 1, r);
        Merge(A, l, m, r);

    }

}
int main(){
    int n;
    scanf("%d", &n);
    int A[n];
    for(int i=0; i<n; i++){
        scanf("%d", &A[i]);
    }
    
    MergeSort(A,0,n-1);
    for(int i = 0 ; i < n ; i++){
        printf("%d ", A[i]);
    }
}

13) Write a program in C to append multiple lines at the end of a text file.

#include <stdio.h>

int main() {
    FILE *file;
    char lines[1000]; // Assuming each line has at most 1000 characters

    // Open the file in append mode
    file = fopen("example.txt", "a");
    if (file == NULL) {
        printf("Error opening the file.\n");
        return 1;
    }

    // Write multiple lines to the file
    printf("Enter the lines to append (Enter 'end' to stop):\n");
    while (1) {
        fgets(lines, sizeof(lines), stdin); // Read input line by line
        if (strncmp(lines, "end", 3) == 0) // Stop appending if user enters 'end'
            break;
        fputs(lines, file); // Append the line to the file
    }

    // Close the file
    fclose(file);
    printf("Lines appended successfully.\n");

    return 0;
}

14) Write C program that use both recursive and non-recursive functions to perform Linear search for a Key value in a given list.

#include <stdio.h>

// Recursive linear search function
int linearSearchRecursive(int arr[], int start, int end, int key) {
    if (start > end)
        return -1; // Key not found

    if (arr[start] == key)
        return start; // Key found at index 'start'

    return linearSearchRecursive(arr, start + 1, end, key); // Recursively search in the remaining array
}

// Non-recursive linear search function
int linearSearch(int arr[], int size, int key) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == key)
            return i; // Key found at index 'i'
    }
    return -1; // Key not found
}

int main() {
    int arr[] = {12, 34, 54, 2, 3, 67, 89};
    int size = sizeof(arr) / sizeof(arr[0]);
    int key = 3;

    // Recursive linear search
    int recursiveIndex = linearSearchRecursive(arr, 0, size - 1, key);
    if (recursiveIndex != -1)
        printf("Key %d found at index %d using recursive linear search.\n", key, recursiveIndex);
    else
        printf("Key %d not found using recursive linear search.\n", key);

    // Non-recursive linear search
    int index = linearSearch(arr, size, key);
    if (index != -1)
        printf("Key %d found at index %d using non-recursive linear search.\n", key, index);
    else
        printf("Key %d not found using non-recursive linear search.\n", key);

    return 0;
}


15) Write a C program to implement Prims’ algorithm.

#include <stdio.h>
#include <limits.h>

#define V 5

int minKey(int key[], int mstSet[]) {
    int min = INT_MAX, min_index;
  
    for (int v = 0; v < V; v++)
        if (mstSet[v] == 0 && key[v] < min)
            min = key[v], min_index = v;
  
    return min_index;
}

void printMST(int parent[], int graph[V][V]) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}

void primMST(int graph[V][V]) {
    int parent[V], key[V], mstSet[V];
  
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = 0;
  
    key[0] = 0;
    parent[0] = -1;
  
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
  
        mstSet[u] = 1;
  
        for (int v = 0; v < V; v++)
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }
  
    printMST(parent, graph);
}

int main() {
    int graph[V][V] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0},
    };
  
    primMST(graph);
  
    return 0;
}

